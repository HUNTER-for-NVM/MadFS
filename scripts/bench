#!/usr/bin/env python3
import argparse
import itertools
import logging
from pathlib import Path

from args import add_common_args, parse_args
from fs import available_fs
from plot import plot_micro_st, plot_micro_mt, plot_ycsb, plot_tpcc
from runner import Runner
from utils import root_dir, get_result_dir, system, drop_cache, init

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bench")


class Benchmark:
    def __init__(self, benchmark):
        init(configure=True)
        self.cmake_target = f"micro_{benchmark}"

    def build_and_run(self, build_type, cmake_args, fs_names, run_config):
        result_dir = get_result_dir(self.cmake_target)

        for fs_name in fs_names:
            fs = available_fs[fs_name]
            runner = Runner(
                self.cmake_target,
                result_dir=result_dir / fs_name,
                build_type=build_type
            )
            runner.build(cmake_args=cmake_args)
            self.run_single_config(
                fs=fs,
                runner=runner,
                run_config=run_config
            )
        return result_dir

    def run_single_config(self, fs, runner: Runner, run_config):
        if fs.path:
            system(f"rm -rf {fs.path}/*")
        runner.run(fs=fs, **run_config)


class YcsbBenchmark(Benchmark):
    workloads = ("a", "b", "c", "d", "e", "f")
    dataset = root_dir / "data" / "ycsb-1m"

    def __init__(self, benchmark):
        super().__init__(benchmark)
        self.cmake_target = "leveldb_ycsb"
        self.download()

    @staticmethod
    def download():
        dataset = YcsbBenchmark.dataset
        ycsb_folder = dataset / "ycsb-0.17.0"

        if not ycsb_folder.exists():
            url = "https://github.com/brianfrankcooper/YCSB/releases/download/0.17.0/ycsb-0.17.0.tar.gz"
            system(f"wget {url} -P {dataset} && tar -xzf {dataset / 'ycsb-0.17.0.tar.gz'} -C {dataset}")

        for (w, t) in itertools.product(YcsbBenchmark.workloads, ("load", "run")):
            file = dataset / f"{w}-{t}.txt"
            if not file.exists():
                system(
                    f"{ycsb_folder / 'bin' / 'ycsb.sh'} {t} basic "
                    f"-P {ycsb_folder / 'workloads' / f'workload{w}'} "
                    f"-p fieldcount=1 -p fieldlength=0 "
                    f"-p recordcount=1000000 -p operationcount=1000000 "
                    f"> {file}"
                )

    def run_single_config(self, fs, runner: Runner, run_config):
        dbdir = fs.path / "bench-dbdir"
        for w in self.workloads:
            system(f"rm -rf {dbdir} && mkdir -p {dbdir}")
            for t in ("load", "run"):
                drop_cache()
                trace_name = f"{w}-{t}"
                trace_path = self.dataset / f"{trace_name}.txt"
                cmd = f"{runner.prog_path} -f {trace_path} -d {dbdir}".split()
                runner.run(cmd=cmd, fs=fs, prog_log_name=f"{trace_name}.log", **run_config)
            system(f"rm -rf {dbdir}")


class TpccBenchmark(Benchmark):
    sql_path = root_dir / "data" / "tpcc.sql"

    def build_and_run(self, build_type, cmake_args, fs_names, run_config):
        if run_config["prog_args"]:
            logging.warning("prog_args will be ignored for tpcc benchmark")
        del run_config["prog_args"]

        result_dir = get_result_dir("tpcc")

        for fs_name in fs_names:
            fs = available_fs[fs_name]

            db_path = fs.path / "tpcc.db"
            system(f"rm -f {db_path} {db_path}-shm {db_path}-wal {db_path}-journal")

            runner = Runner("tpcc_create", result_dir=result_dir / fs_name / "create", build_type=build_type)
            runner.run(cmd=f"sqlite3 {db_path} '.read {self.sql_path}'".split(), fs=fs, **run_config)

            runner = Runner("tpcc_load", result_dir=result_dir / fs_name / "load", build_type=build_type)
            runner.build(cmake_args=cmake_args)
            runner.run(prog_args=f"-w 4 -d {db_path}".split(), fs=fs, **run_config)

            runner = Runner("tpcc_start", result_dir=result_dir / fs_name / "start", build_type=build_type)
            runner.build(cmake_args=cmake_args)
            runner.run(prog_args=f"-w 4 -c 1 -t 200000 -d {db_path}".split(), fs=fs, **run_config)

        return result_dir


bm_classes = {
    "st": Benchmark,
    "mt": Benchmark,
    "meta": Benchmark,
    "ycsb": YcsbBenchmark,
    "tpcc": TpccBenchmark,
}


def main(benchmark, result_dir, **kwargs):
    from plot_meta import plot_meta

    plot_fns = {
        "st": plot_micro_st,
        "mt": plot_micro_mt,
        "meta": plot_meta,
        "ycsb": plot_ycsb,
        "tpcc": plot_tpcc,
    }

    if result_dir is None:
        result_dir = bm_classes[benchmark](benchmark).build_and_run(**kwargs)
    plot_fns[benchmark](result_dir)
    logger.info(f"Results saved to {result_dir}")


if __name__ == "__main__":
    argparser = argparse.ArgumentParser()
    argparser.add_argument(
        "benchmark",
        choices=bm_classes.keys(),
    )
    argparser.add_argument(
        "-p",
        "--result_dir",
        type=Path,
        help="If set, plot the results in the given directory w/o running the benchmark",
    )
    add_common_args(argparser)

    args, run_cfg = parse_args(argparser)
    logger.info(f"args={args}, run_config={run_cfg}")
    main(**vars(args), run_config=run_cfg)
