#!/usr/bin/env python3
import argparse
from dataclasses import dataclass
from pathlib import Path

from plot import plot_micro_st, plot_micro_mt, plot_micro_meta
from runner import Runner
from utils import root_dir, get_timestamp


@dataclass
class Filesystem:
    name: str
    pmem_path: str
    load_ulayfs: bool = False


filesystems = [
    Filesystem("uLayFS", "/mnt/pmem0-ext4-dax", True),
    Filesystem("ext4-dax", "/mnt/pmem0-ext4-dax"),
    Filesystem("ext4-journal", "/mnt/pmem0-ext4-journal"),
    Filesystem("NOVA", "/mnt/pmem0-nova"),
]


def run_micro(benchmark):
    cmake_target = f"micro_{benchmark}"
    result_dir = root_dir / "results" / f"bench_{cmake_target}" / get_timestamp()

    for fs in filesystems:
        runner = Runner(cmake_target, result_dir=result_dir / fs.name)
        runner.build(link_ulayfs=False)
        runner.run(load_ulayfs=fs.load_ulayfs, pmem_path=fs.pmem_path)

    return result_dir


if __name__ == "__main__":
    argparser = argparse.ArgumentParser()
    argparser.add_argument("benchmark", choices=["st", "mt", "meta"])
    argparser.add_argument(
        "-p",
        dest="result_dir",
        type=Path,
        help="If set, plot the results in the given directory w/o running the benchmark",
    )

    args = argparser.parse_args()

    if args.result_dir is None:
        result_dir = run_micro(args.benchmark)
    else:
        result_dir = args.result_dir

    if args.benchmark == "st":
        plot_micro_st(result_dir)
    elif args.benchmark == "mt":
        plot_micro_mt(result_dir)
    elif args.benchmark == "meta":
        plot_micro_meta(result_dir)
