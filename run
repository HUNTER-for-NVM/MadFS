#!/usr/bin/env python3

import argparse
import logging
import pprint
from pathlib import Path

from scripts.utils import system, check_any_args_passed, get_timestamp

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("run")


def run(cmake_target, build_type, cmake_args, prog_args, disable_ulayfs, output_dir):
    is_bench = cmake_target.startswith("bench")
    if is_bench:
        cmake_args += " -DBUILD_BENCH=ON "
    if build_type is None:
        build_type = "release" if is_bench else "debug"

    # set up paths
    output_dir.mkdir(exist_ok=True)
    output_path = output_dir / f"{cmake_target}-{build_type}-{get_timestamp()}"
    run_log_path = output_path.with_suffix(".run.log")
    build_log_path = output_path.with_suffix(".build.log")
    config_log_path = output_path.with_suffix(".config.log")
    build_path = Path(f"build-{build_type}")
    ulayfs_path = build_path / "libulayfs.so"
    exe_path = build_path / cmake_target

    if disable_ulayfs:
        build_targets = cmake_target
        cmd = f"{exe_path} {prog_args}"
    else:
        build_targets = f"{cmake_target} ulayfs"
        cmd = f"env LD_PRELOAD={ulayfs_path} {exe_path} {prog_args}"

    # build
    system(
        f"make {build_type} "
        f"CMAKE_ARGS='{cmake_args} -DLINK_ULAYFS=OFF' "
        f"BUILD_TARGETS='{build_targets}' ",
        log_path=build_log_path,
    )

    # save config
    with open(config_log_path, "w") as fout:
        pprint.pprint(locals(), stream=fout)
    system(f"cmake -LA -N {build_path} >> {config_log_path}")

    # execute
    if build_type == "pmemcheck":
        pmemcheck_dir = build_path / "_deps" / "pmemcheck-src"
        system(
            f"VALGRIND_LIB={pmemcheck_dir}/libexec/valgrind/ "
            f"{pmemcheck_dir}/bin/valgrind --tool=pmemcheck --trace-children=yes "
            f"{cmd}",
            log_path=run_log_path,
        )

    elif build_type == "profile":
        perf_data = output_path.with_suffix(".perf")
        flamegraph_output = output_path.with_suffix(".svg")
        flamegraph_dir = build_path / "_deps" / "flamegraph-src"

        # record perf data
        system(
            f"perf record --freq=997 --call-graph dwarf -o {perf_data} {cmd}",
            log_path=run_log_path,
        )

        # show perf results in terminal
        system(f"perf report -i {perf_data}")

        # generate flamegraph
        system(
            f"perf script -i {perf_data} | "
            f"{flamegraph_dir}/stackcollapse-perf.pl | "
            f"{flamegraph_dir}/flamegraph.pl > {flamegraph_output}"
        )
        logger.info(f"The flamegraph is available at `{flamegraph_output}`")

    else:
        system(cmd, log_path=run_log_path)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Build and run tests or benchmarks")
    parser.add_argument(
        "cmake_target",
        help="see .cpp files in `test` and `bench` for available targets",
    )
    parser.add_argument(
        "build_type",
        nargs=argparse.OPTIONAL,
        help="see Makefile for available build types",
    )
    parser.add_argument(
        "-c",
        "--cmake_args",
        default="",
        help="additional build arguments to be passed to CMake",
    )
    parser.add_argument(
        "-p",
        "--prog_args",
        default="",
        help="arguments to be passed to the program during execution",
    )
    parser.add_argument(
        "-d",
        "--disable_ulayfs",
        action="store_true",
        help="use kernel filesystem instead of uLayFS",
    )
    parser.add_argument(
        "-o",
        "--output_dir",
        default="results",
        type=Path,
        help="specify the output directory (default: `results`)",
    )
    check_any_args_passed(parser)
    args = parser.parse_args()
    logger.debug(f"args={args}")

    run(**vars(args))
