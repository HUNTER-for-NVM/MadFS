#!/usr/bin/env python3

import argparse
import os
import sys
from pathlib import Path

sys.stdout = sys.stderr


def system(cmd):
    print(f"Executing command: `{cmd}`")
    ret = os.system(cmd)
    if ret != 0:
        print(f"Command `{cmd}` failed with return code {ret}")
        exit(ret)


def main(cmake_target, build_type, cmake_args, prog_args, disable_ulayfs):
    is_bench = cmake_target.startswith("bench")
    if is_bench:
        cmake_args += " -DBUILD_BENCH=ON "

    if build_type is None:
        build_type = "release" if is_bench else "debug"

    build_path = Path(f"build-{build_type}")
    ulayfs_path = build_path / "libulayfs.so"
    deps_path = build_path / "_deps"
    exe_path = build_path / cmake_target
    cmd = f"{exe_path} {prog_args}"
    if not disable_ulayfs:
        cmd = f"env LD_PRELOAD={ulayfs_path} {cmd}"

    system(
        f'make {build_type} '
        f'BUILD_ARGS="{cmake_target} ulayfs" '
        f'CMAKE_ARGS="{cmake_args}"'
    )

    if build_type == "pmemcheck":
        pmemcheck_dir = deps_path / "pmemcheck-src"

        system(
            f"VALGRIND_LIB={pmemcheck_dir}/libexec/valgrind/ "
            f"{pmemcheck_dir}/bin/valgrind --tool=pmemcheck --trace-children=yes "
            f"{cmd}"
        )

    elif build_type == "profile":
        perf_data = build_path / f"{cmake_target}.perf"

        system(f"perf record --freq=997 --call-graph dwarf -o {perf_data} {cmd}")
        system(f"perf report -i {perf_data}")

        # generate flame graph
        flamegraph_output = build_path / f"{cmake_target}.svg"
        flamegraph_dir = deps_path / "flamegraph-src"
        system(
            f"perf script -i {perf_data} | "
            f"{flamegraph_dir}/stackcollapse-perf.pl | "
            f"{flamegraph_dir}/flamegraph.pl > {flamegraph_output}"
        )
        print(f"The flamegraph is available at `{flamegraph_output}`")

    else:
        system(cmd)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("cmake_target")
    parser.add_argument("build_type", nargs=argparse.OPTIONAL)
    parser.add_argument("-c", "--cmake_args", default="")
    parser.add_argument("-p", "--prog_args", default="")
    parser.add_argument("-d", "--disable_ulayfs", action="store_true")
    args = parser.parse_args()
    print(f"args: {args}")
    main(**vars(args))
