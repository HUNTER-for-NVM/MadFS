#!/usr/bin/env python3
import argparse
import os

from pathlib import Path


def system(cmd):
    print(f"Executing command: `{cmd}`")
    ret = os.system(cmd)
    if ret != 0:
        print(f"Command `{cmd}` failed with return code {ret}")
        exit(ret)


def main(build_type, cmake_target):
    system(f"make {build_type} MAKE_ARGS=\"{cmake_target}\"")

    build_path = Path(f"build-{build_type}")
    target_path = build_path / cmake_target
    deps_path = build_path / "_deps"

    if build_type == "pmemcheck":
        pmemcheck_dir = deps_path / "pmemcheck-src"

        system(f"VALGRIND_LIB={pmemcheck_dir}/libexec/valgrind/ "
               f"{pmemcheck_dir}/bin/valgrind --tool=pmemcheck {target_path}")

    elif build_type == "profile":
        perf_data = build_path / f"{cmake_target}.perf.data"

        system(f"perf record --freq=997 --call-graph dwarf -o {perf_data} {target_path}")
        system(f"perf report -i {perf_data}")

        flamegraph_output = build_path / f"{cmake_target}.svg"
        flamegraph_dir = deps_path / "flamegraph-src"
        system(f"perf script -i {perf_data} | "
               f"{flamegraph_dir}/stackcollapse-perf.pl | "
               f"{flamegraph_dir}/flamegraph.pl > {flamegraph_output}")
        print(f"The flamegraph is available at `{flamegraph_output}`")

    else:
        system(target_path)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("cmake_target")
    parser.add_argument("build_type", nargs="?", default="debug")
    args = parser.parse_args()
    main(args.build_type, args.cmake_target)
